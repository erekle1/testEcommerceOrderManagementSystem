---
globs: database/migrations/*.php,database/seeders/*.php,database/factories/*.php
---

# Database Design & Migration Guidelines

### Database Configuration
- **Database**: MySQL with migration support
- **Environment configuration**: [.env](mdc:.env)
- **Migration files**: [database/migrations/](mdc:database/migrations/)
- **Commands**: Use `php artisan migrate` to run migrations
- **Rollback**: Use `php artisan migrate:rollback` to rollback migrations

## Migration Best Practices

### Migration Structure & Naming
- **Descriptive Names**: Use descriptive migration names
- **Method Structure**: Include both `up()` and `down()` methods
- **Transactions**: Use transactions for complex operations
- **Indexes**: Add proper indexes and foreign keys
- **Rollback Logic**: Include rollback logic

### Migration Naming Convention
```bash
# Good migration names
php artisan make:migration create_orders_table
php artisan make:migration add_status_to_orders_table
php artisan make:migration create_order_items_table
php artisan make:migration add_foreign_keys_to_order_items_table
```

### Database Standards
- **Table Naming**: Use singular PascalCase for table names (e.g., User, Order)
- **Column Naming**: Use snake_case for column names (e.g., first_name, created_at)
- **Indexes**: Define indexes where necessary to optimize query performance
- **Soft Deletes**: Add softdeletes trait in models and deleted_at column in migrations

### Migration Examples
```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('orders', function (Blueprint $table) {
            $table->id();
            $table->foreignId('customer_id')->constrained()->onDelete('cascade');
            $table->decimal('total_amount', 10, 2);
            $table->enum('status', ['pending', 'processing', 'shipped', 'delivered', 'cancelled'])
                  ->default('pending');
            $table->string('shipping_address');
            $table->string('billing_address');
            $table->timestamp('shipped_at')->nullable();
            $table->timestamp('delivered_at')->nullable();
            $table->timestamps();
            $table->softDeletes(); // Add soft deletes support

            // Indexes for performance
            $table->index(['customer_id', 'status']);
            $table->index('created_at');
            $table->index('email'); // Example index
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('orders');
    }
};
```

## Ecommerce Database Schema

### Core Tables Structure

#### Customers Table
```php
Schema::create('customers', function (Blueprint $table) {
    $table->id();
    $table->string('first_name');
    $table->string('last_name');
    $table->string('email')->unique();
    $table->string('phone')->nullable();
    $table->date('date_of_birth')->nullable();
    $table->enum('gender', ['male', 'female', 'other'])->nullable();
    $table->timestamps();
    $table->softDeletes();
    
    $table->index('email');
});
```

#### Products Table
```php
Schema::create('products', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->text('description')->nullable();
    $table->string('sku')->unique();
    $table->decimal('price', 10, 2);
    $table->integer('stock_quantity')->default(0);
    $table->integer('min_stock_level')->default(5);
    $table->boolean('is_active')->default(true);
    $table->string('category')->nullable();
    $table->json('attributes')->nullable(); // For product variations
    $table->timestamps();
    $table->softDeletes();
    
    $table->index(['is_active', 'category']);
    $table->index('sku');
});
```

#### Order Items Table
```php
Schema::create('order_items', function (Blueprint $table) {
    $table->id();
    $table->foreignId('order_id')->constrained()->onDelete('cascade');
    $table->foreignId('product_id')->constrained()->onDelete('restrict');
    $table->integer('quantity');
    $table->decimal('unit_price', 10, 2);
    $table->decimal('subtotal', 10, 2);
    $table->timestamps();
    
    $table->index('order_id');
});
```

### Relationship Patterns

#### Foreign Key Constraints
```php
// Add foreign keys in separate migration
Schema::table('order_items', function (Blueprint $table) {
    $table->foreign('order_id')
          ->references('id')
          ->on('orders')
          ->onDelete('cascade');
          
    $table->foreign('product_id')
          ->references('id')
          ->on('products')
          ->onDelete('restrict'); // Prevent deletion of products with orders
});
```

## Model Factories

### Factory Structure
```php
<?php

namespace Database\Factories;

use App\Models\Order;
use App\Models\Customer;
use Illuminate\Database\Eloquent\Factories\Factory;

class OrderFactory extends Factory
{
    protected $model = Order::class;

    public function definition(): array
    {
        return [
            'customer_id' => Customer::factory(),
            'total_amount' => $this->faker->randomFloat(2, 10, 1000),
            'status' => $this->faker->randomElement(['pending', 'processing', 'shipped', 'delivered']),
            'shipping_address' => $this->faker->address,
            'billing_address' => $this->faker->address,
            'shipped_at' => $this->faker->optional()->dateTimeBetween('-30 days', 'now'),
            'delivered_at' => $this->faker->optional()->dateTimeBetween('-15 days', 'now'),
        ];
    }

    public function pending(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'pending',
            'shipped_at' => null,
            'delivered_at' => null,
        ]);
    }

    public function delivered(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'delivered',
            'shipped_at' => $this->faker->dateTimeBetween('-30 days', '-15 days'),
            'delivered_at' => $this->faker->dateTimeBetween('-15 days', 'now'),
        ]);
    }
}
```

## Database Seeders

### Seeder Organization
```php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Customer;
use App\Models\Product;
use App\Models\Order;

class DatabaseSeeder extends Seeder
{
    public function run(): void
    {
        // Create customers
        Customer::factory(50)->create();
        
        // Create products
        Product::factory(100)->create();
        
        // Create orders with items
        Order::factory(200)->create()->each(function ($order) {
            $products = Product::inRandomOrder()->take(rand(1, 5))->get();
            
            foreach ($products as $product) {
                $quantity = rand(1, 3);
                $order->orderItems()->create([
                    'product_id' => $product->id,
                    'quantity' => $quantity,
                    'unit_price' => $product->price,
                    'subtotal' => $product->price * $quantity,
                ]);
            }
            
            // Update order total
            $order->update([
                'total_amount' => $order->orderItems->sum('subtotal')
            ]);
        });
    }
}
```

## Performance Optimization

### Indexing Strategy
```php
// Add indexes for common queries
Schema::table('orders', function (Blueprint $table) {
    // Composite index for customer orders by status
    $table->index(['customer_id', 'status']);
    
    // Index for date range queries
    $table->index('created_at');
    
    // Index for status filtering
    $table->index('status');
});

Schema::table('order_items', function (Blueprint $table) {
    // Index for order item lookups
    $table->index(['order_id', 'product_id']);
});
```

### Query Optimization
```php
// Use eager loading to prevent N+1 queries
$orders = Order::with(['customer', 'orderItems.product'])
    ->where('status', 'pending')
    ->latest()
    ->paginate(15);

// Use select specific columns when possible
$orders = Order::select(['id', 'customer_id', 'total_amount', 'status', 'created_at'])
    ->with(['customer:id,first_name,last_name'])
    ->get();
```

## Data Integrity

### Validation Rules
```php
// In migration
$table->decimal('total_amount', 10, 2)->unsigned(); // Prevent negative amounts
$table->integer('quantity')->unsigned(); // Prevent negative quantities

// In model
protected $casts = [
    'total_amount' => 'decimal:2',
    'shipped_at' => 'datetime',
    'delivered_at' => 'datetime',
];

protected $fillable = [
    'customer_id',
    'total_amount',
    'status',
    'shipping_address',
    'billing_address',
];
```

### Soft Deletes
```php
// For important records that shouldn't be permanently deleted
use Illuminate\Database\Eloquent\SoftDeletes;

class Order extends Model
{
    use SoftDeletes;
    
    protected $dates = ['deleted_at'];
}
```

## Backup & Recovery

### Database Backup Strategy
- Regular automated backups
- Test restore procedures
- Keep multiple backup copies
- Document backup and recovery procedures

### Migration Rollback
- Always test rollback procedures
- Use transactions for complex migrations
- Keep migrations atomic and reversible
- Document any data loss during rollbacks