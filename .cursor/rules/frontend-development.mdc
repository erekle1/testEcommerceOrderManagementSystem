---
globs: *.js,*.css,*.blade.php,*.vue,*.ts
---

# Frontend Development - Tailwind CSS 4 & Vite

## Code Formatting & Standards

### Prettier Configuration
- Use Prettier package for consistent code formatting
- Configure Prettier in your project: `npm install --save-dev prettier`
- Format code every time changes are made to ensure consistency
- Use 4 spaces for indentation across all files
- Limit lines to 120 characters maximum

### Prettier Setup
```bash
npm install --save-dev prettier
echo {}> .prettierrc.json
```

### Client-Side Validation
- Manage validation at the client-side before sending data
- Use jQuery validation for forms

```javascript
$("#myForm").validate({
    rules: {
        name: "required",
        email: {
            required: true,
            email: true
        }
    },
    messages: {
        name: "Please enter a name.",
        email: "Please enter a valid email address."
    }
});
```

## Asset Management with Vite

### Entry Points
- Main CSS: [resources/css/app.css](mdc:resources/css/app.css)
- Main JS: [resources/js/app.js](mdc:resources/js/app.js)
- Bootstrap JS: [resources/js/bootstrap.js](mdc:resources/js/bootstrap.js)

### Vite Configuration
The [vite.config.js](mdc:vite.config.js) is configured with:
- Laravel Vite plugin for Blade integration
- Tailwind CSS 4 plugin
- Hot module replacement enabled

## Tailwind CSS 4 Guidelines

### Utility-First Approach
- Use utility classes for styling
- Prefer composition over custom CSS
- Use responsive prefixes (`sm:`, `md:`, `lg:`, `xl:`)
- Leverage state variants (`hover:`, `focus:`, `active:`)

### Component Patterns
```html
<!-- Card Component -->
<div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-200">
    <h3 class="text-lg font-semibold text-gray-900 mb-2">Order Details</h3>
    <p class="text-gray-600">Order #{{ $order->id }}</p>
</div>

<!-- Button Variants -->
<button class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200">
    Primary Button
</button>

<button class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-md transition-colors duration-200">
    Secondary Button
</button>
```

### Form Styling
```html
<form class="space-y-6">
    <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">
            Customer Name
        </label>
        <input type="text" 
               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
               placeholder="Enter customer name">
    </div>
    
    <div class="flex items-center">
        <input type="checkbox" 
               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
        <label class="ml-2 block text-sm text-gray-700">
            Subscribe to newsletter
        </label>
    </div>
</form>
```

### Layout Patterns
```html
<!-- Main Layout -->
<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <h1 class="text-xl font-semibold text-gray-900">Ecommerce Orders</h1>
                <nav class="flex space-x-4">
                    <a href="#" class="text-gray-600 hover:text-gray-900">Dashboard</a>
                    <a href="#" class="text-gray-600 hover:text-gray-900">Orders</a>
                </nav>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Sidebar -->
            <aside class="lg:col-span-1">
                <div class="bg-white rounded-lg shadow p-6">
                    <!-- Sidebar content -->
                </div>
            </aside>
            
            <!-- Content Area -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-lg shadow p-6">
                    <!-- Main content -->
                </div>
            </div>
        </div>
    </main>
</div>
```

### CSRF Protection
- Ensure all forms include CSRF tokens
- Use Blade's {{ }} to escape output for XSS protection

```html
<form method="POST" action="{{ route('user.store') }}">
    @csrf
    <input type="text" name="name" value="{{ old('name') }}">
    <button type="submit">Submit</button>
</form>
```

## Blade Template Guidelines

### Template Structure
- Use `@extends` and `@section` for layouts
- Create reusable components with `@component`
- Use `@include` for partials
- Leverage Blade directives for logic

### Layout Template
```html
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@yield('title', 'Ecommerce Orders')</title>
    
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="bg-gray-50">
    @include('layouts.header')
    
    <main>
        @yield('content')
    </main>
    
    @include('layouts.footer')
    
    @stack('scripts')
</body>
</html>
```

### Component Usage
```html
<!-- Using Blade Components -->
<x-card title="Order Summary" class="mb-6">
    <div class="space-y-4">
        <div class="flex justify-between">
            <span class="text-gray-600">Subtotal:</span>
            <span class="font-medium">${{ $order->subtotal }}</span>
        </div>
        <div class="flex justify-between">
            <span class="text-gray-600">Tax:</span>
            <span class="font-medium">${{ $order->tax }}</span>
        </div>
        <div class="flex justify-between border-t pt-4">
            <span class="text-lg font-semibold">Total:</span>
            <span class="text-lg font-semibold">${{ $order->total }}</span>
        </div>
    </div>
</x-card>
```

## JavaScript Integration

### Alpine.js Setup
Alpine.js is included by default in Laravel 12. Use it for reactive components without complex state management.

### Alpine.js Patterns
```html
<div x-data="{ 
    showModal: false, 
    orderId: null,
    toggleModal(id) {
        this.orderId = id;
        this.showModal = !this.showModal;
    }
}">
    <button @click="toggleModal({{ $order->id }})" 
            class="bg-blue-600 text-white px-4 py-2 rounded">
        View Details
    </button>
    
    <div x-show="showModal" 
         x-transition
         class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 class="text-lg font-semibold mb-4">Order Details</h3>
            <!-- Modal content -->
            <button @click="showModal = false" 
                    class="mt-4 bg-gray-300 text-gray-800 px-4 py-2 rounded">
                Close
            </button>
        </div>
    </div>
</div>
```

### Axios Integration
```javascript
// resources/js/app.js
import axios from 'axios';

// Set up CSRF token
window.axios = axios;
window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

// Example API call
function updateOrderStatus(orderId, status) {
    return axios.patch(`/api/orders/${orderId}`, { status })
        .then(response => {
            // Handle success
            console.log('Order updated:', response.data);
        })
        .catch(error => {
            // Handle error
            console.error('Error updating order:', error);
        });
}
```

## Responsive Design

### Breakpoint Strategy
- Mobile-first approach
- Use Tailwind's responsive prefixes
- Test on multiple screen sizes
- Consider touch interactions for mobile

### Grid Systems
```html
<!-- Responsive Grid -->
<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
    <!-- Grid items -->
</div>

<!-- Responsive Typography -->
<h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold">
    Responsive Heading
</h1>

<!-- Responsive Spacing -->
<div class="p-4 sm:p-6 lg:p-8">
    <!-- Content with responsive padding -->
</div>
```

## Performance Optimization

### Asset Optimization
- Use Vite's built-in optimization
- Implement code splitting for large applications
- Optimize images with proper formats
- Use lazy loading for images

### CSS Optimization
- Purge unused CSS in production
- Use CSS custom properties for theming
- Minimize custom CSS in favor of utilities
- Leverage Tailwind's JIT compilation